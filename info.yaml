--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_ps2_morse_encoder_top.v
    - ps2_controller.v
    - morse_code_encoder.v
    - tone_generator.v
  top_module:  "tt_um_ps2_morse_encoder_top"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Daniel Baumgartner"      # Your name
  title:        "PS/2 Keyboard to Morse Code Encoder"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "PS/2 Keyboard to Morse Code Encoder"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The PS/2 protocol is a communication standard used for connecting keyboards to computers.
      It utilizes a synchronous serial communication method, with two lines for clock and data.
      The keyboard sends data to the computer by modulating the voltage on the data line in response to clock pulses.
      For further information take a look at [PS/2 Wikipedia](https://en.wikipedia.org/wiki/PS/2_port).

      This design includes a module that evaluates the data sent by the keyboard.
      A finite state machine (FSM) in combination with a shift register is used internally for this purpose.
      As soon as data is available, a strobe is generated; this strobe signals to another module that data is ready to be read.
      This further module stores the data in a buffer. As soon as enter or space bar is pressed,
      the contents of the buffer are output as morse code. Only the morse codes for the A-Z and 0-9 keys are supported.
      The exact implementation can be found on [GitHub](https://github.com/byte-me404/tt-ps2-morse-encoder).

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      To test the design, connect a PS/2 keyboard. Connect the data line to 'ui_in[0]' and the clock line to 'ui_in[0]'.
      Don't forget to supply the keyboard with 5V and GND. After everything is connected perform a reset and start typing on the keyboard,
      the input is stored in a buffer (max. 10 characters). With F1 and F4 you can switch between two modes.
      Mode 1 (F1) is the default mode. In this mode, the characters stored in the buffer are output when Enter is pressed on the keyboard.
      No new characters can be entered during output. Mode 2 (F4) outputs the buffer as soon as the Space bar is pressed.
      Segment A of the seven-segment display lights up when a Dit is output, segment D lights up when a Dah is output.
      Segment G lights up when a Dit or a Dah is output. A buzzer can be connected to output 'uo_out[7]' (segment DP) which emits the morse code as a tone (600 Hz).

      If you don't have a PS/2 keyboard, you can also use a USB keyboard. Many but not all USB keyboards still support the PS/2 protocol.
      In this case D+ is clock and D- is data.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - PS/2 Clock
    - PS/2 Data
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - Dit Output
    - none
    - none
    - Dah Output
    - none
    - none
    - Morse Code Output
    - Morse Code Output (Buzzer)
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "ps/2, morse code, keyboard"  # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "PS/2 Keyboard"               # Describe any external hardware needed
  discord:      "db.baum"                     # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/byte-me404/tt-ps2-morse-encoder/blob/main/README.md" # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     500000000                     # Clock frequency in Hz (if required)
  picture:      ""                            # relative path to a picture in your repository (must be 512kb or less)
