--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_ps2_morse_encoder_top.v
    - ps2_controller.v
    - morse_code_encoder.v
    - tone_generator.v
  top_module:  "tt_um_ps2_morse_encoder_top"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Daniel Baumgartner"      # Your name
  title:        "PS/2 Keyboard to Morse Code Encoder"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "PS/2 Keyboard to Morse Code Encoder"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This project implements a PS/2 keyboard to morse Code encoder. For this the output of a PS/2 keyboard is evaluated,
      if a key is pressed on the keyboard, the input is stored in a 14-bit temporary buffer.
      All alphanumeric characters are supported, with the exception of umlauts and numbers on the number pad.
      The output of the design depends on the selected mode.
      Mode 1 is activated with the F1 key and is the default mode after a reset.
      In this mode, the contents of the buffer are output when the enter key is pressed.
      Mode 2 can be activated with the F4 key. If this mode is active, the content of the buffer is output as soon as space bar is pressed.
      The morse code output consists of dots (dit) and dashes (dah).
      The timings for dots, dashes, symbol spacing and spaces have been selected so that a morse signal with approx. 15 WPM (words per minute) is generated.
      The design has four outputs. Dit and dah each have their own output.
      A further output is a combination of dit and dah. This output is active when a dit or dah is being output.
      The last output is intended for connecting a buzzer or a small speaker. This output emits a 600Hz square wave signal when either a dit or a dah is output.

      This project is written in Verilog.
      The design includes three separate modules.
      One module for decoding the PS/2 data from the keyboard that evaluates the data sent by the keyboard.
      Another module generates the morse code output based on the keyboard input, and one additional module generates the 600Hz square wave signal.
      Across the modules, multiple finite state machines (FSM) are used.
      The exact implementation can be found on [GitHub](https://github.com/byte-me404/tt-ps2-morse-encoder).
      For further information about the PS/2 protocol take a look at [PS/2 Wikipedia](https://en.wikipedia.org/wiki/PS/2_port).

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      To test the design, connect a PS/2 keyboard.
      It is important to use a logic converter (5V to 3.3V) for the data and clock line as the Tiny Tapeout chip only support 3.3V!
      Connect the data line to 'ui_in[1]' and the clock line to 'ui_in[0]'.
      Additionally, two pull-up resistors (5kâ„¦) against 5V must be connected to the two lines.
      Don't forget to supply the keyboard with 5V and GND. After everything is connected perform a reset and start typing on the keyboard.
      The input should be stored in a buffer (max. 14 characters). With F1 and F4 you can switch between two modes.
      Mode 1 (F1) is the default mode. In this mode, the characters stored in the buffer are output when enter is pressed on the keyboard.
      Mode 2 (F4) outputs the buffer as soon as space bar is pressed.
      It is worth noting that no new characters can be entered during output.
      Segment A of the seven-segment display lights up when a dit is output, segment D lights up when a dah is output.
      Segment G lights up when a dit or a dah is output. A buzzer can be connected to output 'uo_out[7]' (segment DP) which emits the morse code as a tone (600 Hz).

      If you don't have a PS/2 keyboard, you can also use a USB keyboard. Many but not all USB keyboards still support the PS/2 protocol.
      In this case D+ is clock and D- is data (don't forget the pull-up resitors and the level shifter).

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - PS/2 Clock
    - PS/2 Data
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - Dit Output
    - none
    - none
    - Dah Output
    - none
    - none
    - Morse Code Output
    - Morse Code Output (Buzzer)
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "ps/2, morse code, keyboard"  # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "PS/2 Keyboard"               # Describe any external hardware needed
  discord:      "db.baum"                     # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://github.com/byte-me404/tt-ps2-morse-encoder/blob/main/README.md" # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     500000000                     # Clock frequency in Hz (if required)
  picture:      ""                            # relative path to a picture in your repository (must be 512kb or less)
